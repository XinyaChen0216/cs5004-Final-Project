Name:Xinya Chen
Email:chen.xinya1@northeastern.edu
Final Project: Animation

This program consists of 3 main parts, including model, controller, and view. 

1.Model:
	Model has 3 main parts, including Shape, Animation, and ModelImplementation.
	
	I. Shape:
		shape objects has several fields. 
			* name
				- the name of this shape object
			* position
				-Point2D class to store the x axis and y axis of the position
		    * dimension
		    	-x radius or width
		    	-y radius or height
		    * color
		    	-Color class to store the components of color: red, green, and blue
		    * time
		    	-Time class to store the start time and end time of displaying
			* animationList: a list to store animations of this shape object
			
		It has an interface called "Shape", which lists out getter methods.
		It has an abstract class called "ShapeAbstract", which abstracts the common codes for
		Rectangle and Oval concrete classes. 
		Each concrete classes has getType() and toString() methods.
		
	II. Animation:
		We have 3 animation types so far. Enum class called "AnimationType" is created to predefined
		this 3 constants: ChangeColor, Move, and Scale.
		It has an interface called "AnimationInterface", which lists out getter methods.
		It has an abstract class called "AnimationAbstraction", which abstracts the common codes
		for ChangeColor, Move, and Scale concrete classes. 
		
		The AnimationAbstract constructor takes in the following arguments:
			* shape object that is going to animate 
			* time 
				- the start time and end time of animation
			* animation type
			
		Each concrete class constructor will also take in appropriate changes-parameters:
			ChangeColor class: old and new color.
			Move: old and new position.
			Scale: old and new width/xRadius and height/yRadius
			
		Every time a new Animation object is created, it will be checked if it can be added to the shape
		object's animationList. It can be added if there is no overlapped time for the same animation type.
		
		Each concrete class has getter methods to get the new information of changes,
		and toString method. 
		
	III. ModeImplementation
	
		ModelImplementation has 2 fields:
			1. shapeList
				- a list of shape objects that are going to animate.
			2. all_shape_animation_list
				- a list of all shapes' animations combined together, and then sort those animations
				  based on the times. At the end, we will loop this list, and each animation is performed.
		ModelInterface is an interface that lists out getter methods.

Changes that are made after the part1 submission:
1. Method "generatedAnimatedShape" is added in the shape interface. The purpose is to update the shape status based on the time and the speed that users input. 



//GET LIST- CLONE!!!


2. Controller
	Controller takes in model, view and Appendable as parameters. (This design needs to be improved in the future.)
	Controller has only one method, and when it gets called, the view will display the output to the users. 
3. View
	There are 4 main views.
	1. text based view
		The shape and motion information will be shown in text here. 
	2. visual view
		Visual view class extends from JFrame. And the JPanel is added into this JFrame to display shapes and motions. When the controller calls the displayView method, the timer starts. And then the JPanel calls its paintComponent method to update shapes and motions as time goes by. 
		Inside the paintComponent method, there is a method called generatedAnimatedShape. What it does is to calculate what kinds of status the shape is at certain time.
	3. SVg text view
		It will produce a textual description of the animation that is compliant with the SVG file format. The output of the program will be saved in a .svg file, and can be directly viewed in a web browser. 

4. Main method
	The main method of the program takes user input as parameters, and the input is in the form of array of String. 
	The input is then broken down into different parts:
		-in: takes the name of the animation file.
		-view: takes the type of view to display; valide view input are 	   text, visual, and svg.
		-out: takes where the output should show go. This input is 			  optional. If the users do not write down this argument, the 		default is standard.out, which is going to display the 			  output in the console.
		-speed: takes the integer-ticks-per-second. The bigger value, the 		  faster the view will be displayed. This input is also 			opitonal. The default value is 1.
	The input will be checked if they are valid. The invalid input will trigger and popup the error message, which is implemented by JOptionPane. 

		 